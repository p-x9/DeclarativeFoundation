
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.0, *)
@available(iOS 3.2, *)
extension Modify.DynamicMemberWrap where T: NSMutableAttributedString {

    @discardableResult
    @_disfavoredOverload
    public func addAttribute(_ name: Foundation.NSAttributedString.Key, value: Any, range: Foundation.NSRange) -> T {
        self.value.addAttribute(name, value: value, range: range)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addAttributes(_ attrs: [Foundation.NSAttributedString.Key : Any] = [:], range: Foundation.NSRange) -> T {
        self.value.addAttributes(attrs, range: range)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func append(_ attrString: Foundation.NSAttributedString) -> T {
        self.value.append(attrString)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func beginEditing() -> T {
        self.value.beginEditing()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func deleteCharacters(in range: Foundation.NSRange) -> T {
        self.value.deleteCharacters(in: range)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func endEditing() -> T {
        self.value.endEditing()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insert(_ attrString: Foundation.NSAttributedString, at loc: Swift.Int) -> T {
        self.value.insert(attrString, at: loc)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeAttribute(_ name: Foundation.NSAttributedString.Key, range: Foundation.NSRange) -> T {
        self.value.removeAttribute(name, range: range)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func replaceCharacters(in range: Foundation.NSRange, with attrString: Foundation.NSAttributedString) -> T {
        self.value.replaceCharacters(in: range, with: attrString)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func replaceCharacters(in range: Foundation.NSRange, with str: Swift.String) -> T {
        self.value.replaceCharacters(in: range, with: str)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setAttributedString(_ attrString: Foundation.NSAttributedString) -> T {
        self.value.setAttributedString(attrString)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setAttributes(_ attrs: [Foundation.NSAttributedString.Key : Any]?, range: Foundation.NSRange) -> T {
        self.value.setAttributes(attrs, range: range)
        return self.value
    }

}

@available(iOS 3.2, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSMutableAttributedString {
    
}

@available(macOS 10.0, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSMutableAttributedString {

}

#endif
