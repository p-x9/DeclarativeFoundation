
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: NSCoder {

    @discardableResult
    @_disfavoredOverload
    public func decodeArray(ofObjCType itemType: Swift.UnsafePointer<Swift.CChar>, count: Swift.Int, at array: Swift.UnsafeMutableRawPointer) -> T {
        self.value.decodeArray(ofObjCType: itemType, count: count, at: array)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 100000)
    @available(iOS, introduced: 2.0, deprecated: 100000)
    public func decodeValue(ofObjCType type: Swift.UnsafePointer<Swift.CChar>, at data: Swift.UnsafeMutableRawPointer) -> T {
        self.value.decodeValue(ofObjCType: type, at: data)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func decodeValue(ofObjCType type: Swift.UnsafePointer<Swift.CChar>, at data: Swift.UnsafeMutableRawPointer, size: Swift.Int) -> T {
        self.value.decodeValue(ofObjCType: type, at: data, size: size)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ data: Foundation.Data) -> T {
        self.value.encode(data)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ object: Any?) -> T {
        self.value.encode(object)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ object: Any?, forKey key: Swift.String) -> T {
        self.value.encode(object, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ value: Swift.Bool, forKey key: Swift.String) -> T {
        self.value.encode(value, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ value: Swift.Double, forKey key: Swift.String) -> T {
        self.value.encode(value, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ value: Swift.Float, forKey key: Swift.String) -> T {
        self.value.encode(value, forKey: key)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func encode(_ value: Swift.Int, forKey key: Swift.String) -> T {
        self.value.encode(value, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ value: Swift.Int32, forKey key: Swift.String) -> T {
        self.value.encode(value, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(_ value: Swift.Int64, forKey key: Swift.String) -> T {
        self.value.encode(value, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeArray(ofObjCType type: Swift.UnsafePointer<Swift.CChar>, count: Swift.Int, at array: Swift.UnsafeRawPointer) -> T {
        self.value.encodeArray(ofObjCType: type, count: count, at: array)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeBycopyObject(_ anObject: Any?) -> T {
        self.value.encodeBycopyObject(anObject)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeByrefObject(_ anObject: Any?) -> T {
        self.value.encodeByrefObject(anObject)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeBytes(_ byteaddr: Swift.UnsafeRawPointer?, length: Swift.Int) -> T {
        self.value.encodeBytes(byteaddr, length: length)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeBytes(_ bytes: Swift.UnsafePointer<Swift.UInt8>?, length: Swift.Int, forKey key: Swift.String) -> T {
        self.value.encodeBytes(bytes, length: length, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeCInt(_ value: Swift.Int32, forKey key: Swift.String) -> T {
        self.value.encodeCInt(value, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeConditionalObject(_ object: Any?) -> T {
        self.value.encodeConditionalObject(object)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeConditionalObject(_ object: Any?, forKey key: Swift.String) -> T {
        self.value.encodeConditionalObject(object, forKey: key)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeRootObject(_ rootObject: Any) -> T {
        self.value.encodeRootObject(rootObject)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encodeValue(ofObjCType type: Swift.UnsafePointer<Swift.CChar>, at addr: Swift.UnsafeRawPointer) -> T {
        self.value.encodeValue(ofObjCType: type, at: addr)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func failWithError(_ error: Swift.Error) -> T {
        self.value.failWithError(error)
        return self.value
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSCoder {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSCoder {

}

#endif
