
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.0, *)
@available(iOS 3.0, *)
extension Modify.DynamicMemberWrap where T: UndoManager {

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func __registerUndoWithTarget(_ target: Any, handler undoHandler: @escaping @Sendable (Any) -> Swift.Void) -> T {
        self.value.__registerUndoWithTarget(target, handler: undoHandler)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func beginUndoGrouping() -> T {
        self.value.beginUndoGrouping()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func disableUndoRegistration() -> T {
        self.value.disableUndoRegistration()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func enableUndoRegistration() -> T {
        self.value.enableUndoRegistration()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func endUndoGrouping() -> T {
        self.value.endUndoGrouping()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func redo() -> T {
        self.value.redo()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func registerUndo(withTarget target: Any, selector: ObjectiveC.Selector, object anObject: Any?) -> T {
        self.value.registerUndo(withTarget: target, selector: selector, object: anObject)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeAllActions() -> T {
        self.value.removeAllActions()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeAllActions(withTarget target: Any) -> T {
        self.value.removeAllActions(withTarget: target)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func setActionIsDiscardable(_ discardable: Swift.Bool) -> T {
        self.value.setActionIsDiscardable(discardable)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setActionName(_ actionName: Swift.String) -> T {
        self.value.setActionName(actionName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func undo() -> T {
        self.value.undo()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func undoNestedGroup() -> T {
        self.value.undoNestedGroup()
        return self.value
    }

}

@available(iOS 3.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: UndoManager {
    
}

@available(macOS 10.0, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: UndoManager {

}

#endif
