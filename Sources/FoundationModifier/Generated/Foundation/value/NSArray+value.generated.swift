
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: NSArray {

    @discardableResult
    @_disfavoredOverload
    public func addObserver(_ observer: ObjectiveC.NSObject, toObjectsAt indexes: Foundation.IndexSet, forKeyPath keyPath: Swift.String, options: Foundation.NSKeyValueObservingOptions = [], context: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.addObserver(observer, toObjectsAt: indexes, forKeyPath: keyPath, options: options, context: context)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateObjects(_ block: (Any, Swift.Int, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateObjects(block)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateObjects(at s: Foundation.IndexSet, options opts: Foundation.NSEnumerationOptions = [], using block: (Any, Swift.Int, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateObjects(at: s, options: opts, using: block)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateObjects(options opts: Foundation.NSEnumerationOptions = [], using block: (Any, Swift.Int, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateObjects(options: opts, using: block)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeObserver(_ observer: ObjectiveC.NSObject, fromObjectsAt indexes: Foundation.IndexSet, forKeyPath keyPath: Swift.String) -> T {
        self.value.removeObserver(observer, fromObjectsAt: indexes, forKeyPath: keyPath)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func removeObserver(_ observer: ObjectiveC.NSObject, fromObjectsAt indexes: Foundation.IndexSet, forKeyPath keyPath: Swift.String, context: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.removeObserver(observer, fromObjectsAt: indexes, forKeyPath: keyPath, context: context)
        return self.value
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSArray {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSArray {

}

#endif
