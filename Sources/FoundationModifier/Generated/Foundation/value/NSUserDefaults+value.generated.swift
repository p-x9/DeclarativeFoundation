
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: UserDefaults {

    @discardableResult
    @_disfavoredOverload
    public func addSuite(named suiteName: Swift.String) -> T {
        self.value.addSuite(named: suiteName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func register(defaults registrationDictionary: [Swift.String : Any]) -> T {
        self.value.register(defaults: registrationDictionary)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeObject(forKey defaultName: Swift.String) -> T {
        self.value.removeObject(forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removePersistentDomain(forName domainName: Swift.String) -> T {
        self.value.removePersistentDomain(forName: domainName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeSuite(named suiteName: Swift.String) -> T {
        self.value.removeSuite(named: suiteName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeVolatileDomain(forName domainName: Swift.String) -> T {
        self.value.removeVolatileDomain(forName: domainName)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func set(_ url: Foundation.URL?, forKey defaultName: Swift.String) -> T {
        self.value.set(url, forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func set(_ value: Any?, forKey defaultName: Swift.String) -> T {
        self.value.set(value, forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func set(_ value: Swift.Bool, forKey defaultName: Swift.String) -> T {
        self.value.set(value, forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func set(_ value: Swift.Double, forKey defaultName: Swift.String) -> T {
        self.value.set(value, forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func set(_ value: Swift.Float, forKey defaultName: Swift.String) -> T {
        self.value.set(value, forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func set(_ value: Swift.Int, forKey defaultName: Swift.String) -> T {
        self.value.set(value, forKey: defaultName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setPersistentDomain(_ domain: [Swift.String : Any], forName domainName: Swift.String) -> T {
        self.value.setPersistentDomain(domain, forName: domainName)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setVolatileDomain(_ domain: [Swift.String : Any], forName domainName: Swift.String) -> T {
        self.value.setVolatileDomain(domain, forName: domainName)
        return self.value
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: UserDefaults {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: UserDefaults {

}

#endif
