
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.2, *)
@available(iOS 2.0, *)
extension Modify.DynamicMemberWrap where T: HTTPCookieStorage {

    @discardableResult
    @_disfavoredOverload
    public func deleteCookie(_ cookie: Foundation.HTTPCookie) -> T {
        self.value.deleteCookie(cookie)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func getCookiesFor(_ task: Foundation.URLSessionTask, completionHandler: @escaping @Sendable ([Foundation.HTTPCookie]?) -> Swift.Void) -> T {
        self.value.getCookiesFor(task, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func removeCookies(since date: Foundation.Date) -> T {
        self.value.removeCookies(since: date)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setCookie(_ cookie: Foundation.HTTPCookie) -> T {
        self.value.setCookie(cookie)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setCookies(_ cookies: [Foundation.HTTPCookie], for URL: Foundation.URL?, mainDocumentURL: Foundation.URL?) -> T {
        self.value.setCookies(cookies, for: URL, mainDocumentURL: mainDocumentURL)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func storeCookies(_ cookies: [Foundation.HTTPCookie], for task: Foundation.URLSessionTask) -> T {
        self.value.storeCookies(cookies, for: task)
        return self.value
    }

}

@available(iOS 2.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: HTTPCookieStorage {
    
}

@available(macOS 10.2, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: HTTPCookieStorage {

}

#endif
