
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: NSString {

    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateLines(_ block: @escaping (Swift.String, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateLines(block)
        return self.value
    }

    @available(macOS, introduced: 10.7, deprecated: 100000, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")
    @available(iOS, introduced: 5.0, deprecated: 100000, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")
    public func enumerateLinguisticTags(in range: Foundation.NSRange, scheme: Foundation.NSLinguisticTagScheme, options: Foundation.NSLinguisticTagger.Options = [], orthography: Foundation.NSOrthography?, using block: (Foundation.NSLinguisticTag?, Foundation.NSRange, Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateLinguisticTags(in: range, scheme: scheme, options: options, orthography: orthography, using: block)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateSubstrings(in range: Foundation.NSRange, options opts: Foundation.NSString.EnumerationOptions = [], using block: @escaping (Swift.String?, Foundation.NSRange, Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateSubstrings(in: range, options: opts, using: block)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getCharacters(_ buffer: Swift.UnsafeMutablePointer<Foundation.unichar>) -> T {
        self.value.getCharacters(buffer)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getCharacters(_ buffer: Swift.UnsafeMutablePointer<Foundation.unichar>, range: Foundation.NSRange) -> T {
        self.value.getCharacters(buffer, range: range)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getLineStart(_ startPtr: Swift.UnsafeMutablePointer<Swift.Int>?, end lineEndPtr: Swift.UnsafeMutablePointer<Swift.Int>?, contentsEnd contentsEndPtr: Swift.UnsafeMutablePointer<Swift.Int>?, for range: Foundation.NSRange) -> T {
        self.value.getLineStart(startPtr, end: lineEndPtr, contentsEnd: contentsEndPtr, for: range)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getParagraphStart(_ startPtr: Swift.UnsafeMutablePointer<Swift.Int>?, end parEndPtr: Swift.UnsafeMutablePointer<Swift.Int>?, contentsEnd contentsEndPtr: Swift.UnsafeMutablePointer<Swift.Int>?, for range: Foundation.NSRange) -> T {
        self.value.getParagraphStart(startPtr, end: parEndPtr, contentsEnd: contentsEndPtr, for: range)
        return self.value
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSString {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSString {

}

#endif
