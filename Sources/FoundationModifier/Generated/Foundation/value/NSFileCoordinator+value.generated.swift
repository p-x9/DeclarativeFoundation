
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.7, *)
@available(iOS 5.0, *)
extension Modify.DynamicMemberWrap where T: NSFileCoordinator {

    @discardableResult
    @_disfavoredOverload
    public func cancel() -> T {
        self.value.cancel()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func coordinate(readingItemAt readingURL: Foundation.URL, options readingOptions: Foundation.NSFileCoordinator.ReadingOptions = [], writingItemAt writingURL: Foundation.URL, options writingOptions: Foundation.NSFileCoordinator.WritingOptions = [], error outError: Foundation.NSErrorPointer, byAccessor readerWriter: (Foundation.URL, Foundation.URL) -> Swift.Void) -> T {
        self.value.coordinate(readingItemAt: readingURL, options: readingOptions, writingItemAt: writingURL, options: writingOptions, error: outError, byAccessor: readerWriter)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func coordinate(readingItemAt url: Foundation.URL, options: Foundation.NSFileCoordinator.ReadingOptions = [], error outError: Foundation.NSErrorPointer, byAccessor reader: (Foundation.URL) -> Swift.Void) -> T {
        self.value.coordinate(readingItemAt: url, options: options, error: outError, byAccessor: reader)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func coordinate(with intents: [Foundation.NSFileAccessIntent], queue: Foundation.OperationQueue, byAccessor accessor: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.coordinate(with: intents, queue: queue, byAccessor: accessor)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func coordinate(writingItemAt url1: Foundation.URL, options options1: Foundation.NSFileCoordinator.WritingOptions = [], writingItemAt url2: Foundation.URL, options options2: Foundation.NSFileCoordinator.WritingOptions = [], error outError: Foundation.NSErrorPointer, byAccessor writer: (Foundation.URL, Foundation.URL) -> Swift.Void) -> T {
        self.value.coordinate(writingItemAt: url1, options: options1, writingItemAt: url2, options: options2, error: outError, byAccessor: writer)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func coordinate(writingItemAt url: Foundation.URL, options: Foundation.NSFileCoordinator.WritingOptions = [], error outError: Foundation.NSErrorPointer, byAccessor writer: (Foundation.URL) -> Swift.Void) -> T {
        self.value.coordinate(writingItemAt: url, options: options, error: outError, byAccessor: writer)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func item(at oldURL: Foundation.URL, didMoveTo newURL: Foundation.URL) -> T {
        self.value.item(at: oldURL, didMoveTo: newURL)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func item(at oldURL: Foundation.URL, willMoveTo newURL: Foundation.URL) -> T {
        self.value.item(at: oldURL, willMoveTo: newURL)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func item(at url: Foundation.URL, didChangeUbiquityAttributes attributes: Swift.Set<Foundation.URLResourceKey>) -> T {
        self.value.item(at: url, didChangeUbiquityAttributes: attributes)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func prepare(forReadingItemsAt readingURLs: [Foundation.URL], options readingOptions: Foundation.NSFileCoordinator.ReadingOptions = [], writingItemsAt writingURLs: [Foundation.URL], options writingOptions: Foundation.NSFileCoordinator.WritingOptions = [], error outError: Foundation.NSErrorPointer, byAccessor batchAccessor: (@escaping () -> Swift.Void) -> Swift.Void) -> T {
        self.value.prepare(forReadingItemsAt: readingURLs, options: readingOptions, writingItemsAt: writingURLs, options: writingOptions, error: outError, byAccessor: batchAccessor)
        return self.value
    }

}

@available(iOS 5.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSFileCoordinator {
    
}

@available(macOS 10.7, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSFileCoordinator {

}

#endif
