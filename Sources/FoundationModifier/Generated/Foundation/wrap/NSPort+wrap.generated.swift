
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: Port {

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func invalidate() -> Self {
        self.value.invalidate()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func remove(from runLoop: Foundation.RunLoop, forMode mode: Foundation.RunLoop.Mode) -> Self {
        self.value.remove(from: runLoop, forMode: mode)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func schedule(in runLoop: Foundation.RunLoop, forMode mode: Foundation.RunLoop.Mode) -> Self {
        self.value.schedule(in: runLoop, forMode: mode)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setDelegate(_ anObject: Foundation.PortDelegate?) -> Self {
        self.value.setDelegate(anObject)
        return Modify.DynamicMemberWrap(self.value)
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: Port {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: Port {

}

#endif
