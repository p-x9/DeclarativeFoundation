
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.5, *)
@available(iOS 2.0, *)
extension Modify.DynamicMemberWrap where T: Operation {

    @discardableResult
    public func addDependency(_ op: Foundation.Operation) -> Self {
        self.value.addDependency(op)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func cancel() -> Self {
        self.value.cancel()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func main() -> Self {
        self.value.main()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeDependency(_ op: Foundation.Operation) -> Self {
        self.value.removeDependency(op)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func start() -> Self {
        self.value.start()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @_unavailableFromAsync(message: "Use completionBlock or a dependent Operation instead")
    public func waitUntilFinished() -> Self {
        self.value.waitUntilFinished()
        return Modify.DynamicMemberWrap(self.value)
    }

}

@available(iOS 2.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: Operation {
    
}

@available(macOS 10.5, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: Operation {

}

#endif
