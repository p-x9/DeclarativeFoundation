
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: FileHandle {

    @discardableResult
    public func acceptConnectionInBackgroundAndNotify() -> Self {
        self.value.acceptConnectionInBackgroundAndNotify()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func acceptConnectionInBackgroundAndNotify(forModes modes: [Foundation.RunLoop.Mode]?) -> Self {
        self.value.acceptConnectionInBackgroundAndNotify(forModes: modes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.0, deprecated: 100000)
    @available(iOS, introduced: 2.0, deprecated: 100000)
    public func closeFile() -> Self {
        self.value.closeFile()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func readInBackgroundAndNotify() -> Self {
        self.value.readInBackgroundAndNotify()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func readInBackgroundAndNotify(forModes modes: [Foundation.RunLoop.Mode]?) -> Self {
        self.value.readInBackgroundAndNotify(forModes: modes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func readToEndOfFileInBackgroundAndNotify() -> Self {
        self.value.readToEndOfFileInBackgroundAndNotify()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func readToEndOfFileInBackgroundAndNotify(forModes modes: [Foundation.RunLoop.Mode]?) -> Self {
        self.value.readToEndOfFileInBackgroundAndNotify(forModes: modes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.0, deprecated: 100000)
    @available(iOS, introduced: 2.0, deprecated: 100000)
    public func seek(toFileOffset offset: Swift.UInt64) -> Self {
        self.value.seek(toFileOffset: offset)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.0, deprecated: 100000)
    @available(iOS, introduced: 2.0, deprecated: 100000)
    public func synchronizeFile() -> Self {
        self.value.synchronizeFile()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.0, deprecated: 100000)
    @available(iOS, introduced: 2.0, deprecated: 100000)
    public func truncateFile(atOffset offset: Swift.UInt64) -> Self {
        self.value.truncateFile(atOffset: offset)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func waitForDataInBackgroundAndNotify() -> Self {
        self.value.waitForDataInBackgroundAndNotify()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func waitForDataInBackgroundAndNotify(forModes modes: [Foundation.RunLoop.Mode]?) -> Self {
        self.value.waitForDataInBackgroundAndNotify(forModes: modes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.0, deprecated: 100000)
    @available(iOS, introduced: 2.0, deprecated: 100000)
    public func write(_ data: Foundation.Data) -> Self {
        self.value.write(data)
        return Modify.DynamicMemberWrap(self.value)
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: FileHandle {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: FileHandle {

}

#endif
