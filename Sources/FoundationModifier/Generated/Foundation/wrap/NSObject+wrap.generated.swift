
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.0, *)
@available(iOS 2.0, *)
extension Modify.DynamicMemberWrap where T: NSObject {

    @discardableResult
    public func addObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String, options: Foundation.NSKeyValueObservingOptions = [], context: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.addObserver(observer, forKeyPath: keyPath, options: options, context: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func attemptRecovery(fromError error: Swift.Error, optionIndex recoveryOptionIndex: Swift.Int, delegate: Any?, didRecoverSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.attemptRecovery(fromError: error, optionIndex: recoveryOptionIndex, delegate: delegate, didRecoverSelector: didRecoverSelector, contextInfo: contextInfo)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")
    public func didChange(_ changeKind: Foundation.NSKeyValueChange, valuesAt indexes: Foundation.IndexSet, forKey key: Swift.String) -> Self {
        self.value.didChange(changeKind, valuesAt: indexes, forKey: key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")
    public func didChangeValue(forKey key: Swift.String) -> Self {
        self.value.didChangeValue(forKey: key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")
    public func didChangeValue(forKey key: Swift.String, withSetMutation mutationKind: Foundation.NSKeyValueSetMutationKind, using objects: Swift.Set<Swift.AnyHashable>) -> Self {
        self.value.didChangeValue(forKey: key, withSetMutation: mutationKind, using: objects)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func doesNotRecognizeSelector(_ aSelector: ObjectiveC.Selector!) -> Self {
        self.value.doesNotRecognizeSelector(aSelector)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(*, deprecated, message: "Objective-C garbage collection is no longer supported")
    @available(*, deprecated, message: "Objective-C garbage collection is no longer supported")
    public func finalize() -> Self {
        self.value.finalize()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @_unavailableFromAsync(message: "Asynchronous work should be called from isolation from an actor")
    public func perform(_ aSelector: ObjectiveC.Selector, on thr: Foundation.Thread, with arg: Any?, waitUntilDone wait: Swift.Bool) -> Self {
        self.value.perform(aSelector, on: thr, with: arg, waitUntilDone: wait)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @_unavailableFromAsync(message: "Asynchronous work should be called from isolation from an actor")
    public func perform(_ aSelector: ObjectiveC.Selector, on thr: Foundation.Thread, with arg: Any?, waitUntilDone wait: Swift.Bool, modes array: [Swift.String]?) -> Self {
        self.value.perform(aSelector, on: thr, with: arg, waitUntilDone: wait, modes: array)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func perform(_ aSelector: ObjectiveC.Selector, with anArgument: Any?, afterDelay delay: Foundation.TimeInterval) -> Self {
        self.value.perform(aSelector, with: anArgument, afterDelay: delay)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func perform(_ aSelector: ObjectiveC.Selector, with anArgument: Any?, afterDelay delay: Foundation.TimeInterval, inModes modes: [Foundation.RunLoop.Mode]) -> Self {
        self.value.perform(aSelector, with: anArgument, afterDelay: delay, inModes: modes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func performSelector(inBackground aSelector: ObjectiveC.Selector, with arg: Any?) -> Self {
        self.value.performSelector(inBackground: aSelector, with: arg)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Work intended for the main actor should be marked with @MainActor")
    public func performSelector(onMainThread aSelector: ObjectiveC.Selector, with arg: Any?, waitUntilDone wait: Swift.Bool) -> Self {
        self.value.performSelector(onMainThread: aSelector, with: arg, waitUntilDone: wait)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Work intended for the main actor should be marked with @MainActor")
    public func performSelector(onMainThread aSelector: ObjectiveC.Selector, with arg: Any?, waitUntilDone wait: Swift.Bool, modes array: [Swift.String]?) -> Self {
        self.value.performSelector(onMainThread: aSelector, with: arg, waitUntilDone: wait, modes: array)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String) -> Self {
        self.value.removeObserver(observer, forKeyPath: keyPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func removeObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String, context: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.removeObserver(observer, forKeyPath: keyPath, context: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setNilValueForKey(_ key: Swift.String) -> Self {
        self.value.setNilValueForKey(key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setValue(_ value: Any?, forKey key: Swift.String) -> Self {
        self.value.setValue(value, forKey: key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setValue(_ value: Any?, forKeyPath keyPath: Swift.String) -> Self {
        self.value.setValue(value, forKeyPath: keyPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setValue(_ value: Any?, forUndefinedKey key: Swift.String) -> Self {
        self.value.setValue(value, forUndefinedKey: key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setValuesForKeys(_ keyedValues: [Swift.String : Any]) -> Self {
        self.value.setValuesForKeys(keyedValues)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")
    public func willChange(_ changeKind: Foundation.NSKeyValueChange, valuesAt indexes: Foundation.IndexSet, forKey key: Swift.String) -> Self {
        self.value.willChange(changeKind, valuesAt: indexes, forKey: key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")
    public func willChangeValue(forKey key: Swift.String) -> Self {
        self.value.willChangeValue(forKey: key)
        return Modify.DynamicMemberWrap(self.value)
    }

    @_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")
    public func willChangeValue(forKey key: Swift.String, withSetMutation mutationKind: Foundation.NSKeyValueSetMutationKind, using objects: Swift.Set<Swift.AnyHashable>) -> Self {
        self.value.willChangeValue(forKey: key, withSetMutation: mutationKind, using: objects)
        return Modify.DynamicMemberWrap(self.value)
    }

}

@available(iOS 2.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSObject {
    
}

@available(macOS 10.0, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSObject {

}

#endif
