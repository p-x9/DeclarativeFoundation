
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: NSData {

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.9, *)
    @discardableResult
    public func enumerateBytes(_ block: (Swift.UnsafeRawPointer, Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> Self {
        self.value.enumerateBytes(block)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.0, deprecated: 10.10, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")
    @available(iOS, introduced: 2.0, deprecated: 8.0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")
    public func getBytes(_ buffer: Swift.UnsafeMutableRawPointer) -> Self {
        self.value.getBytes(buffer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getBytes(_ buffer: Swift.UnsafeMutableRawPointer, length: Swift.Int) -> Self {
        self.value.getBytes(buffer, length: length)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getBytes(_ buffer: Swift.UnsafeMutableRawPointer, range: Foundation.NSRange) -> Self {
        self.value.getBytes(buffer, range: range)
        return Modify.DynamicMemberWrap(self.value)
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSData {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSData {

}

#endif
