
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

extension Modify.DynamicMemberWrap where T: NSMutableCharacterSet {

    @discardableResult
    public func addCharacters(in aRange: Foundation.NSRange) -> Self {
        self.value.addCharacters(in: aRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addCharacters(in aString: Swift.String) -> Self {
        self.value.addCharacters(in: aString)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func formIntersection(with otherSet: Foundation.CharacterSet) -> Self {
        self.value.formIntersection(with: otherSet)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func formUnion(with otherSet: Foundation.CharacterSet) -> Self {
        self.value.formUnion(with: otherSet)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func invert() -> Self {
        self.value.invert()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeCharacters(in aRange: Foundation.NSRange) -> Self {
        self.value.removeCharacters(in: aRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeCharacters(in aString: Swift.String) -> Self {
        self.value.removeCharacters(in: aString)
        return Modify.DynamicMemberWrap(self.value)
    }

}


@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSMutableCharacterSet {
    
}


@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSMutableCharacterSet {

}

#endif
