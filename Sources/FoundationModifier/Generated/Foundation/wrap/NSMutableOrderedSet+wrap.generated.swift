
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.7, *)
@available(iOS 5.0, *)
extension Modify.DynamicMemberWrap where T: NSMutableOrderedSet {

    @discardableResult
    public func add(_ object: Any) -> Self {
        self.value.add(object)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func add(_ objects: Swift.UnsafePointer<AnyObject>?, count: Swift.Int) -> Self {
        self.value.add(objects, count: count)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addObjects(from array: [Any]) -> Self {
        self.value.addObjects(from: array)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func apply(_ difference: Swift.CollectionDifference<Any>) -> Self {
        self.value.apply(difference)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func exchangeObject(at idx1: Swift.Int, withObjectAt idx2: Swift.Int) -> Self {
        self.value.exchangeObject(at: idx1, withObjectAt: idx2)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func filter(using p: Foundation.NSPredicate) -> Self {
        self.value.filter(using: p)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insert(_ object: Any, at idx: Swift.Int) -> Self {
        self.value.insert(object, at: idx)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insert(_ objects: [Any], at indexes: Foundation.IndexSet) -> Self {
        self.value.insert(objects, at: indexes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func intersect(_ other: Foundation.NSOrderedSet) -> Self {
        self.value.intersect(other)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func intersectSet(_ other: Swift.Set<Swift.AnyHashable>) -> Self {
        self.value.intersectSet(other)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func minus(_ other: Foundation.NSOrderedSet) -> Self {
        self.value.minus(other)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func minusSet(_ other: Swift.Set<Swift.AnyHashable>) -> Self {
        self.value.minusSet(other)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveObjects(at indexes: Foundation.IndexSet, to idx: Swift.Int) -> Self {
        self.value.moveObjects(at: indexes, to: idx)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func remove(_ object: Any) -> Self {
        self.value.remove(object)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeAllObjects() -> Self {
        self.value.removeAllObjects()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeObject(at idx: Swift.Int) -> Self {
        self.value.removeObject(at: idx)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeObjects(at indexes: Foundation.IndexSet) -> Self {
        self.value.removeObjects(at: indexes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeObjects(in array: [Any]) -> Self {
        self.value.removeObjects(in: array)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeObjects(in range: Foundation.NSRange) -> Self {
        self.value.removeObjects(in: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceObject(at idx: Swift.Int, with object: Any) -> Self {
        self.value.replaceObject(at: idx, with: object)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceObjects(at indexes: Foundation.IndexSet, with objects: [Any]) -> Self {
        self.value.replaceObjects(at: indexes, with: objects)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceObjects(in range: Foundation.NSRange, with objects: Swift.UnsafePointer<AnyObject>?, count: Swift.Int) -> Self {
        self.value.replaceObjects(in: range, with: objects, count: count)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setObject(_ obj: Any, at idx: Swift.Int) -> Self {
        self.value.setObject(obj, at: idx)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sort(comparator cmptr: (Any, Any) -> Foundation.ComparisonResult) -> Self {
        self.value.sort(comparator: cmptr)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sort(options opts: Foundation.NSSortOptions = [], usingComparator cmptr: (Any, Any) -> Foundation.ComparisonResult) -> Self {
        self.value.sort(options: opts, usingComparator: cmptr)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func sort(using sortDescriptors: [Foundation.NSSortDescriptor]) -> Self {
        self.value.sort(using: sortDescriptors)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sortRange(_ range: Foundation.NSRange, options opts: Foundation.NSSortOptions = [], usingComparator cmptr: (Any, Any) -> Foundation.ComparisonResult) -> Self {
        self.value.sortRange(range, options: opts, usingComparator: cmptr)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func union(_ other: Foundation.NSOrderedSet) -> Self {
        self.value.union(other)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func unionSet(_ other: Swift.Set<Swift.AnyHashable>) -> Self {
        self.value.unionSet(other)
        return Modify.DynamicMemberWrap(self.value)
    }

}

@available(iOS 5.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSMutableOrderedSet {
    
}

@available(macOS 10.7, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: NSMutableOrderedSet {

}

#endif
