
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Foundation)
import Foundation

@available(macOS 10.2, *)
@available(iOS 2.0, *)
extension Modify.DynamicMemberWrap where T: URLCache {

    @available(macOS 10.10, *)
    @discardableResult
    public func getCachedResponse(for dataTask: Foundation.URLSessionDataTask, completionHandler: @escaping @Sendable (Foundation.CachedURLResponse?) -> Swift.Void) -> Self {
        self.value.getCachedResponse(for: dataTask, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeAllCachedResponses() -> Self {
        self.value.removeAllCachedResponses()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func removeCachedResponse(for dataTask: Foundation.URLSessionDataTask) -> Self {
        self.value.removeCachedResponse(for: dataTask)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeCachedResponse(for request: Foundation.URLRequest) -> Self {
        self.value.removeCachedResponse(for: request)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func removeCachedResponses(since date: Foundation.Date) -> Self {
        self.value.removeCachedResponses(since: date)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func storeCachedResponse(_ cachedResponse: Foundation.CachedURLResponse, for dataTask: Foundation.URLSessionDataTask) -> Self {
        self.value.storeCachedResponse(cachedResponse, for: dataTask)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func storeCachedResponse(_ cachedResponse: Foundation.CachedURLResponse, for request: Foundation.URLRequest) -> Self {
        self.value.storeCachedResponse(cachedResponse, for: request)
        return Modify.DynamicMemberWrap(self.value)
    }

}

@available(iOS 2.0, *)
@available(macOS, unavailable)
extension Modify.DynamicMemberWrap where T: URLCache {
    
}

@available(macOS 10.2, *)
@available(iOS, unavailable)
extension Modify.DynamicMemberWrap where T: URLCache {

}

#endif
